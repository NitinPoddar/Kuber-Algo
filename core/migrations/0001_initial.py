# Generated by Django 5.2.3 on 2025-06-20 07:55

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Broker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('broker_name', models.CharField(max_length=100, unique=True)),
                ('root_api', models.TextField()),
                ('server_ip', models.TextField(blank=True, null=True)),
                ('authenticator_req', models.IntegerField(blank=True, null=True)),
                ('password_req', models.IntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='InstrumentList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=50)),
                ('symbol', models.CharField(max_length=50)),
                ('name', models.CharField(max_length=100)),
                ('expiry', models.CharField(blank=True, max_length=50, null=True)),
                ('strike', models.FloatField(blank=True, null=True)),
                ('lotsize', models.IntegerField(blank=True, null=True)),
                ('instrumenttype', models.CharField(blank=True, max_length=50, null=True)),
                ('exch_seg', models.CharField(blank=True, max_length=50, null=True)),
                ('tick_size', models.FloatField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='StatusColorMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.TextField()),
                ('color', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='TechnicalIndicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('function_code', models.TextField(blank=True, null=True)),
                ('default_params', models.JSONField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('name', models.CharField(max_length=1000)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AlgoList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('algo_name', models.CharField(max_length=100, unique=True)),
                ('minimum_fund_reqd', models.IntegerField()),
                ('algo_description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='algos_created', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AlgorithmLogic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num_stocks', models.IntegerField()),
                ('instrument_name', models.CharField(max_length=100)),
                ('expiry_date', models.CharField(max_length=20)),
                ('strike_price', models.CharField(max_length=20)),
                ('option_type', models.CharField(max_length=10)),
                ('order_direction', models.CharField(choices=[('Buy', 'Buy'), ('Sell', 'Sell')], max_length=10)),
                ('order_type', models.CharField(choices=[('Market', 'Market'), ('Limit', 'Limit'), ('LimitThenMarket', 'LimitThenMarket')], max_length=20)),
                ('algo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='legs', to='core.algolist')),
            ],
        ),
        migrations.CreateModel(
            name='AlgoRegister',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('broker_username', models.TextField()),
                ('api_key', models.CharField(blank=True, max_length=1000, null=True)),
                ('secret_key', models.CharField(blank=True, max_length=1000, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('algo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.algorithmlogic')),
                ('broker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.broker')),
            ],
        ),
        migrations.CreateModel(
            name='AlgoStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_size', models.IntegerField(blank=True, null=True)),
                ('status', models.CharField(max_length=50)),
                ('profit_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('number_of_subscribers', models.IntegerField(blank=True, null=True)),
                ('algo_register', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.algoregister')),
            ],
        ),
        migrations.CreateModel(
            name='AlgoVariable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('expression', models.TextField()),
                ('algo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variables', to='core.algolist')),
            ],
        ),
        migrations.CreateModel(
            name='Condition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition_type', models.CharField(choices=[('entry', 'Entry'), ('exit', 'Exit')], max_length=10)),
                ('variable_name', models.CharField(max_length=100)),
                ('operator', models.CharField(max_length=10)),
                ('value', models.CharField(max_length=100)),
                ('connector', models.CharField(choices=[('AND', 'AND'), ('OR', 'OR')], max_length=3)),
                ('algo_logic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='conditions', to='core.algorithmlogic')),
                ('nested_condition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.condition')),
            ],
        ),
    ]
